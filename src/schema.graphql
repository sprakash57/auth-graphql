type Query {
    users: [User!]!
    me: User!
    posts: [Post!]!
    comments: [Comment!]!
}

input CreateUser {
    name: String!, 
    email: String!, 
    age: Int
}

input UpdateUser {
    name: String, 
    email: String, 
    age: Int
}

input CreatePost {
    title: String!, 
    published: Boolean!, 
    body: String, 
    author: ID!
}

input UpdatePost {
    title: String,
    published: Boolean,
    body: String
}

input CreateComment {
    text: String!, 
    author: ID!, 
    postId: ID!
}

input UpdateComment {
    text: String
}

type Mutation {
    createUser(data: CreateUser!): User!
    updateUser(id: ID!, data: UpdateUser!): User!
    deleteUser(id: ID!): User!
    createPost(data: CreatePost!): Post!
    updatePost(id: ID!, data: UpdatePost!): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateComment!): Comment!
    updateComment(id: ID!, data: UpdateComment!): Comment!
    deleteComment(id: ID!): Comment!
}

type User {
    id: ID!
    name: String!
    email: String
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID,
    title: String!
    body: String
    published: Boolean!
    author: User!
    comments: [Comment!]
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}
